{"/home/travis/build/npmtest/node-npmtest-node-red-dashboard/test.js":"/* istanbul instrument in package npmtest_node_red_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/lib.npmtest_node_red_dashboard.js":"/* istanbul instrument in package npmtest_node_red_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_red_dashboard = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_red_dashboard = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-red-dashboard && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_red_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_red_dashboard\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_red_dashboard.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_red_dashboard.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_red_dashboard.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_red_dashboard.__dirname + '/lib.npmtest_node_red_dashboard.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/license.js":"/* */\n/* Copyright 2016,2017 JS Foundation and other contributors, https://js.foundation/ */\n/* Copyright 2016 IBM Corp.                                                 */\n/* Copyright 2015 Andrei Tatar                                              */\n/* */\n/* Licensed under the Apache License, Version 2.0 (the \"License\");          */\n/* you may not use this file except in compliance with the License.         */\n/* You may obtain a copy of the License at                                  */\n/* */\n/* http://www.apache.org/licenses/LICENSE-2.0                               */\n/* */\n/* Unless required by applicable law or agreed to in writing, software      */\n/* distributed under the License is distributed on an \"AS IS\" BASIS,        */\n/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. */\n/* See the License for the specific language governing permissions and      */\n/* limitations under the License. */\n/* */\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/ui.js":"\nvar inited = false;\n\nmodule.exports = function(RED) {\n    if (!inited) {\n        inited = true;\n        init(RED.server, RED.httpNode || RED.httpAdmin, RED.log, RED.settings);\n    }\n    return {\n        add: add,\n        addLink: addLink,\n        addBaseConfig: addBaseConfig,\n        emit: emit,\n        emitSocket: emitSocket,\n        toNumber: toNumber.bind(null, false),\n        toFloat: toNumber.bind(null, true),\n        updateUi: updateUi,\n        ev: ev,\n        getTheme: getTheme,\n        getSizes: getSizes\n    };\n};\n\nvar serveStatic = require('serve-static'),\n    socketio = require('socket.io'),\n    path = require('path'),\n    fs = require('fs'),\n    events = require('events'),\n    dashboardVersion = require('./package.json').version;\n\nvar baseConfiguration = {};\n\nvar tabs = [];\nvar links = [];\nvar updateValueEventName = 'update-value';\nvar io;\nvar currentValues = {};\nvar replayMessages = {};\nvar removeStateTimers = {};\nvar removeStateTimeout = 1000;\nvar ev = new events.EventEmitter();\nev.setMaxListeners(0);\n\nvar settings = {};\n\nfunction toNumber(keepDecimals, config, input) {\n    if (typeof input !== \"number\") {\n        var inputString = input.toString();\n        input = keepDecimals ? parseFloat(inputString) : parseInt(inputString);\n    }\n    if (config.step) { input = Math.round(Math.round(input/config.step)*config.step*10000)/10000; }\n    return isNaN(input) ? config.min : input;\n}\n\nfunction emit(event, data) {\n    io.emit(event, data);\n}\n\nfunction emitSocket(event, data) {\n    if (data.hasOwnProperty(\"socketid\") && (data.socketid !== undefined)) {\n        io.to(data.socketid).emit(event,data);\n    }\n    else {\n        io.emit(event, data);\n    }\n}\n\nfunction noConvert(value) {\n    return value;\n}\n\nfunction beforeEmit(msg, value) {\n    return { value:value };\n}\n\nfunction beforeSend(msg) {\n    //do nothing\n}\n\n/*\noptions:\n    node - the node that represents the control on a flow\n    control - the control to be added\n    tab - tab config node that this control belongs to\n    group - group name\n    [emitOnlyNewValues] - boolean (default true).\n        If true, it checks if the payload changed before sending it\n        to the front-end. If the payload is the same no message is sent.\n\n    [convert] - callback to convert the value before sending it to the front-end\n    [convertBack] - callback to convert the message from front-end before sending it to the next connected node\n\n    [beforeEmit] - callback to prepare the message that is emitted to the front-end\n    [beforeSend] - callback to prepare the message that is sent to the output\n\n    [forwardInputMessages] - default true. If true, forwards input messages to the output\n    [storeFrontEndInputAsState] - default true. If true, any message received from front-end is stored as state\n*/\nfunction add(opt) {\n    clearTimeout(removeStateTimers[opt.node.id]);\n    delete removeStateTimers[opt.node.id];\n\n    if (typeof opt.emitOnlyNewValues === 'undefined') {\n        opt.emitOnlyNewValues = true;\n    }\n    if (typeof opt.forwardInputMessages === 'undefined') {\n        opt.forwardInputMessages = true;\n    }\n    if (typeof opt.storeFrontEndInputAsState === 'undefined') {\n        opt.storeFrontEndInputAsState = true;\n    }\n    opt.beforeEmit = opt.beforeEmit || beforeEmit;\n    opt.beforeSend = opt.beforeSend || beforeSend;\n    opt.convert = opt.convert || noConvert;\n    opt.convertBack = opt.convertBack || noConvert;\n    opt.control.id = opt.node.id;\n    var remove = addControl(opt.tab, opt.group, opt.control);\n\n    opt.node.on(\"input\", function(msg) {\n        if (typeof msg.enabled === 'boolean') {\n            var state = replayMessages[opt.node.id];\n            if (!state) { replayMessages[opt.node.id] = state = {id: opt.node.id}; }\n            state.disabled = !msg.enabled;\n            io.emit(updateValueEventName, state);\n        }\n        if (!msg.hasOwnProperty(\"payload\")) { return; } // return if no payload\n        // remove res and req as they are often circular\n        if (msg.hasOwnProperty(\"res\")) { delete msg.res; }\n        if (msg.hasOwnProperty(\"req\")) { delete msg.req; }\n\n        // Retrieve the dataset for this node\n        var oldValue = currentValues[opt.node.id];\n\n        // Call the convert function in the node to get the new value\n        // as well as the full dataset.\n        var conversion = opt.convert(msg.payload, oldValue, msg);\n\n        // If the update flag is set, emit the newPoint, and store the full dataset\n        var fullDataset;\n        var newPoint;\n        if ((typeof(conversion) === 'object') && (conversion.update !== undefined)) {\n            newPoint = conversion.newPoint;\n            fullDataset = conversion.updatedValues;\n        }\n        else {\n            // If no update flag is set, this means the conversion contains\n            // the full dataset or the new value (e.g. gauges)\n            fullDataset = conversion;\n        }\n\n        // If we have something new to emit\n        if (newPoint !== undefined || !opt.emitOnlyNewValues || oldValue != fullDataset) {\n            currentValues[opt.node.id] = fullDataset;\n\n            // Determine what to emit over the websocket\n            // (the new point or the full dataset).\n\n            // Always store the full dataset.\n            var toStore = opt.beforeEmit(msg, fullDataset);\n            var toEmit;\n            if (newPoint !== undefined) { toEmit = opt.beforeEmit(msg, newPoint); }\n            else { toEmit = toStore; }\n\n            toEmit.id = toStore.id = opt.node.id;\n\n            // Emit and Store the data\n            io.emit(updateValueEventName, toEmit);\n            replayMessages[opt.node.id] = toStore;\n\n            // Handle the node output\n            if (opt.forwardInputMessages && opt.node._wireCount) {\n                msg.payload = opt.convertBack(fullDataset);\n                msg = opt.beforeSend(msg) || msg;\n                opt.node.send(msg);\n            }\n        }\n    });\n\n    var handler = function (msg) {\n        if (msg.id !== opt.node.id) { return; }\n        var converted = opt.convertBack(msg.value);\n        if (opt.storeFrontEndInputAsState) {\n            currentValues[msg.id] = converted;\n            replayMessages[msg.id] = msg;\n        }\n        var toSend = {payload: converted};\n        toSend = opt.beforeSend(toSend, msg) || toSend;\n        toSend.socketid = toSend.socketid || msg.socketid;\n        opt.node.send(toSend);\n\n        if (opt.storeFrontEndInputAsState) {\n            //fwd to all UI clients\n            io.emit(updateValueEventName, msg);\n        }\n    };\n\n    ev.on(updateValueEventName, handler);\n\n    return function() {\n        ev.removeListener(updateValueEventName, handler);\n        remove();\n        removeStateTimers[opt.node.id] = setTimeout(function() {\n            delete currentValues[opt.node.id];\n            delete replayMessages[opt.node.id];\n        }, removeStateTimeout);\n    };\n}\n\n//from: http://stackoverflow.com/a/28592528/3016654\nfunction join() {\n    var trimRegex = new RegExp('^\\\\/|\\\\/$','g'),\n    paths = Array.prototype.slice.call(arguments);\n    return '/'+paths.map(function(e) {return e.replace(trimRegex,\"\");}).filter(function(e) {return e;}).join('/');\n}\n\nfunction init(server, app, log, redSettings) {\n    var uiSettings = redSettings.ui || {};\n    if ((uiSettings.hasOwnProperty(\"path\")) && (typeof uiSettings.path === \"string\")) {\n        settings.path = uiSettings.path;\n    }\n    else { settings.path = 'ui'; }\n    settings.defaultGroupHeader = uiSettings.defaultGroup || 'Default';\n\n    var fullPath = join(redSettings.httpNodeRoot, settings.path);\n    var socketIoPath = join(fullPath, 'socket.io');\n\n    io = socketio(server, {path: socketIoPath});\n\n    fs.stat(path.join(__dirname, 'dist/index.html'), function(err, stat) {\n        if (!err) {\n            app.use( join(settings.path), serveStatic(path.join(__dirname, \"dist\")) );\n        }\n        else {\n            log.info(\"Dashboard using development folder\");\n            app.use(join(settings.path), serveStatic(path.join(__dirname, \"src\")));\n            var vendor_packages = [\n                'angular', 'angular-sanitize', 'angular-animate', 'angular-aria', 'angular-material',\n                'angular-material-icons', 'svg-morpheus', 'font-awesome',\n                'sprintf-js',\n                'jquery', 'jquery-ui',\n                'd3', 'raphael', 'justgage',\n                'angular-chart.js', 'chart.js', 'moment',\n                'angularjs-color-picker', 'tinycolor2', 'less'\n            ];\n            vendor_packages.forEach(function (packageName) {\n                app.use(join(settings.path, 'vendor', packageName), serveStatic(path.join(__dirname, 'node_modules', packageName)));\n            });\n        }\n    });\n\n    log.info(\"Dashboard version \" + dashboardVersion + \" started at \" + fullPath);\n\n    io.on('connection', function(socket) {\n        ev.emit(\"newsocket\", socket.client.id, socket.request.connection.remoteAddress);\n        updateUi(socket);\n\n        socket.on(updateValueEventName, ev.emit.bind(ev, updateValueEventName));\n        socket.on('ui-replay-state', function() {\n            var ids = Object.getOwnPropertyNames(replayMessages);\n            ids.forEach(function (id) {\n                socket.emit(updateValueEventName, replayMessages[id]);\n            });\n            socket.emit('ui-replay-done');\n        });\n        socket.on('ui-refresh', function() {\n            updateUi();\n        });\n        socket.on('disconnect', function() {\n            ev.emit(\"endsocket\", socket.client.id, socket.request.connection.remoteAddress);\n        });\n    });\n}\n\nvar updateUiPending = false;\nfunction updateUi(to) {\n    if (!to) {\n        if (updateUiPending) { return; }\n        updateUiPending = true;\n        to = io;\n    }\n    process.nextTick(function() {\n        tabs.forEach(function(t) {\n            t.theme = baseConfiguration.theme;\n        });\n        links.forEach(function(l) {\n            l.theme = baseConfiguration.theme;\n        });\n        to.emit('ui-controls', {\n            site: baseConfiguration.site,\n            theme: baseConfiguration.theme,\n            tabs: tabs,\n            links: links\n        });\n        updateUiPending = false;\n    });\n}\n\nfunction find(array, predicate) {\n    for (var i=0; i<array.length; i++) {\n        if (predicate(array[i])) {\n            return array[i];\n        }\n    }\n}\n\nfunction itemSorter(item1, item2) {\n    if (item1.order === 0 && item2.order !== 0) {\n        return 1;\n    }\n    else if (item1.order !== 0 && item2.order === 0) {\n        return -1;\n    }\n    return item1.order - item2.order;\n}\n\nfunction addControl(tab, groupHeader, control) {\n    if (typeof control.type !== 'string') { return function() {}; }\n    groupHeader = groupHeader || settings.defaultGroupHeader;\n    control.order = parseFloat(control.order);\n\n    var foundTab = find(tabs, function (t) {return t.id === tab.id });\n    if (!foundTab) {\n        foundTab = {\n            id: tab.id,\n            header: tab.config.name,\n            order: parseFloat(tab.config.order),\n            icon: tab.config.icon,\n            items: []\n        };\n        tabs.push(foundTab);\n        tabs.sort(itemSorter);\n    }\n\n    var foundGroup = find(foundTab.items, function (g) {return g.header === groupHeader;});\n    if (!foundGroup) {\n        foundGroup = {\n            header: groupHeader,\n            items: []\n        };\n        foundTab.items.push(foundGroup);\n    }\n    foundGroup.items.push(control);\n    foundGroup.items.sort(itemSorter);\n    foundGroup.order = groupHeader.config.order;\n    foundTab.items.sort(itemSorter);\n\n    updateUi();\n\n    // Return the remove function for this control\n    return function() {\n        var index = foundGroup.items.indexOf(control);\n        if (index >= 0) {\n            // Remove the item from the group\n            foundGroup.items.splice(index, 1);\n\n            // If the group is now empty, remove it from the tab\n            if (foundGroup.items.length === 0) {\n                index = foundTab.items.indexOf(foundGroup);\n                if (index >= 0) {\n                    foundTab.items.splice(index, 1);\n\n                    // If the tab is now empty, remove it as well\n                    if (foundTab.items.length === 0) {\n                        index = tabs.indexOf(foundTab);\n                        if (index >= 0) {\n                            tabs.splice(index, 1);\n                        }\n                    }\n                }\n            }\n            updateUi();\n        }\n    }\n}\n\nfunction addLink(name, link, icon, order, target) {\n    var newLink = {\n        name: name,\n        link: link,\n        icon: icon,\n        order: order || 1,\n        target: target\n    };\n\n    links.push(newLink);\n    links.sort(itemSorter);\n    updateUi();\n\n    return function() {\n        var index = links.indexOf(newLink);\n        if (index < 0) { return; }\n        links.splice(index, 1);\n        updateUi();\n    }\n}\n\nfunction addBaseConfig(config) {\n    if (config) { baseConfiguration = config; }\n    updateUi();\n}\n\nfunction getTheme() {\n    if (baseConfiguration && baseConfiguration.hasOwnProperty(\"theme\") && (typeof baseConfiguration.theme !== \"undefined\") ) {\n        return baseConfiguration.theme.themeState;\n    }\n    else {\n        return undefined;\n    }\n}\n\nfunction getSizes() {\n    if (baseConfiguration && baseConfiguration.hasOwnProperty(\"site\") && (typeof baseConfiguration.site !== \"undefined\") && baseConfiguration.site.hasOwnProperty(\"sizes\")) {\n        return baseConfiguration.site.sizes;\n    }\n    else {\n        return { sx:48, sy:48, gx:6, gy:6, cx:6, cy:6, px:0, py:0 };\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_audio.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function uiAudioNode(config) {\n        RED.nodes.createNode(this,config);\n        this.voice = config.voice;\n        this.group = config.group;\n        this.always = config.always || false;\n        if (this.group && RED.nodes.getNode(this.group).hasOwnProperty(\"config\")) {\n            this.tabname = RED.nodes.getNode(RED.nodes.getNode(this.group).config.tab).name;\n        }\n        var node = this;\n        this.on('input', function(msg) {\n            if (Buffer.isBuffer(msg.payload)) {\n                ui.emit('ui-audio', { audio:msg.payload, tabname:node.tabname, always:node.always });\n            }\n            else if (typeof msg.payload === \"string\") {\n                ui.emit('ui-audio', { tts:msg.payload, voice:(node.voice || msg.voice || 0), tabname:node.tabname, always:node.always });\n            }\n        });\n    }\n    RED.nodes.registerType(\"ui_audio\", uiAudioNode);\n}\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_base.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n    var path= require('path');\n\n    function BaseNode(config) {\n        RED.nodes.createNode(this, config);\n        var defaultLightTheme = {\n            baseColor: '#0094CE',\n            baseFont: 'Helvetica Neue'\n        }\n        var defaultDarkTheme = {\n            baseColor: '#097479',\n            baseFont: 'Helvetica Neue'\n        }\n        var defaultCustomTheme = {\n            name: 'Untitled Theme 1',\n            baseColor: defaultLightTheme.baseColor,\n            baseFont: defaultLightTheme.baseFont\n        }\n\n        // Setup theme name\n        // First try old format (for upgrading with old flow file)\n        // Then try new format\n        // Else fallback to theme-light\n        var themeName;\n        if (typeof(config.theme) === 'string') { themeName = config.theme; }\n        else { themeName = config.theme.name || \"theme-light\"; }\n\n        // Setup other styles\n        var defaultThemeState = {}\n        if (themeName === 'theme-light') {\n            defaultThemeState[\"base-color\"] = {value: \"#0094CE\"};\n            defaultThemeState[\"page-backgroundColor\"] = {value: \"#fafafa\"};\n            defaultThemeState[\"page-titlebar-backgroundColor\"] = {value: \"#0094CE\"};\n            defaultThemeState[\"page-sidebar-backgroundColor\"] = {value: \"#ffffff\"};\n            defaultThemeState[\"group-backgroundColor\"] = {value: \"#ffffff\"};\n            defaultThemeState[\"group-textColor\"] = {value: \"#000000\"};\n            defaultThemeState[\"group-borderColor\"] = {value: \"#ffffff\"};\n            defaultThemeState[\"widget-textColor\"] = {value: \"#111111\"};\n            defaultThemeState[\"widget-backgroundColor\"] = {value: \"#0094CE\"};\n        }\n        else {\n            defaultThemeState[\"base-color\"] = {value: \"#097479\"};\n            defaultThemeState[\"page-backgroundColor\"] = {value: \"#111111\"};\n            defaultThemeState[\"page-titlebar-backgroundColor\"] = {value: \"#097479\"};\n            defaultThemeState[\"page-sidebar-backgroundColor\"] = {value: \"#000000\"};\n            defaultThemeState[\"group-backgroundColor\"] = {value: \"#333333\"};\n            defaultThemeState[\"group-textColor\"] = {value: \"#10cfd8\"};\n            defaultThemeState[\"group-borderColor\"] = {value: \"#555555\"};\n            defaultThemeState[\"widget-textColor\"] = {value: \"#eeeeee\"};\n            defaultThemeState[\"widget-backgroundColor\"] = {value: \"#097479\"};\n        }\n\n        var defaultThemeObject = {\n            name: themeName,\n            lightTheme: config.theme.lightTheme || defaultLightTheme,\n            darkTheme: config.theme.darkTheme || defaultDarkTheme,\n            customTheme: config.theme.customTheme || defaultCustomTheme,\n            themeState: config.theme.themeState || defaultThemeState\n        }\n\n        // var siteName = \"Node-RED Dashboard\";\n        // if (config.name) { siteName = config.name }\n        // if (config.site) { siteName = config.site.name }\n        // var defaultSiteObject = {\n        //     name: siteName\n        // }\n\n        this.config = {\n            theme: defaultThemeObject,\n            site: config.site\n        }\n        ui.addBaseConfig(this.config);\n    }\n    RED.nodes.registerType(\"ui_base\", BaseNode);\n    RED.library.register(\"themes\");\n\n    RED.httpAdmin.get('/uisettings', function(req, res) {\n        var ret = RED.settings.ui || \"{}\";\n        res.json(ret);\n    });\n\n    RED.httpAdmin.get('/ui_base/js/*', function(req, res) {\n        var filename = path.join(__dirname , '../dist/js', req.params[0]);\n        res.sendFile(filename);\n    });\n\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_button.js":"module.exports = function(RED) {\n\n    var ui = require('../ui')(RED);\n\n    function ButtonNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        var payloadType = config.payloadType;\n        var payload = config.payload;\n\n        if (payloadType === 'flow' || payloadType === 'global') {\n            try {\n                var parts = RED.util.normalisePropertyExpression(payload);\n                if (parts.length === 0) {\n                    throw new Error();\n                }\n            } catch(err) {\n                node.warn(\"Invalid payload property expression - defaulting to node id\")\n                payload = node.id;\n                payloadType = 'str';\n            }\n        } else {\n            payload = payload || node.id;\n        }\n\n        var done = ui.add({\n            node: node,\n            tab: tab,\n            group: group,\n            emitOnlyNewValues: false,\n            control: {\n                type: 'button',\n                label: config.label,\n                color: config.color,\n                bgcolor: config.bgcolor,\n                icon: config.icon,\n                order: config.order,\n                value: payload,\n                width: config.width || group.config.width || 3,\n                height: config.height || 1\n            },\n            beforeSend: function (msg) {\n                msg.topic = config.topic;\n            },\n            convertBack: function (value) {\n                if (payloadType === \"date\") {\n                    value = Date.now();\n                } else {\n                    value = RED.util.evaluateNodeProperty(payload,payloadType,node);\n                }\n                return value;\n            },\n            storeFrontEndInputAsState: false\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_button\", ButtonNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_chart.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n    var ChartIdList = {};\n\n    function ChartNode(config) {\n        RED.nodes.createNode(this, config);\n        this.chartType = config.chartType || \"line\";\n        var node = this;\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n        if (config.width === \"0\") { delete config.width; }\n        if (config.height === \"0\") { delete config.height; }\n        // number of pixels wide the chart will be... 43 = sizes.sx - sizes.px\n        var pixelsWide = ((config.width || group.config.width || 6) - 1) * 43 - 15;\n        if (!tab || !group) { return; }\n        var options = {\n            emitOnlyNewValues: false,\n            node: node,\n            tab: tab,\n            group: group,\n            control: {\n                type: 'chart',\n                look: node.chartType,\n                order: config.order,\n                label: config.label,\n                legend: config.legend || false,\n                interpolate: config.interpolate,\n                nodata: config.nodata,\n                width: parseInt(config.width || group.config.width || 6),\n                height: parseInt(config.height || group.config.width/2+1 || 4),\n                ymin: config.ymin,\n                ymax: config.ymax,\n                xformat : config.xformat || \"HH:mm:SS\",\n                cutout: parseInt(config.cutout || 0),\n                colors: config.colors\n            },\n            convertBack: function(data) {\n                if (data[0]) {\n                    if (data[0] && data[0].hasOwnProperty(\"values\") && data[0].values.hasOwnProperty(\"series\") ) {\n                        var o = [];\n                        for (var i=0; i<data[0].values.series.length; i++) {\n                            if (typeof data[0].values.data[i] === \"number\") {\n                                o.push({ key:data[0].values.series[i], values:data[0].values.data[i] });\n                            }\n                            else {\n                                var d = data[0].values.data[i].map(function(i) { return [i.x, i.y]; });\n                                o.push({ key:data[0].values.series[i], values:d });\n                            }\n                        }\n                        data = o;\n                    }\n                    return data;\n                }\n            },\n            convert: function(value, oldValue, msg) {\n                if (ChartIdList.hasOwnProperty(node.id) && ChartIdList[node.id] !== node.chartType) {\n                    value = \"changed\";\n                    oldValue = [];\n                }\n                ChartIdList[node.id] = node.chartType;\n                var converted = {};\n                if (Array.isArray(value)) {\n                    if (node.chartType !== \"line\") {\n                        var nb = {series:[], data:[]};\n                        for (var v in value) {\n                            if (value.hasOwnProperty(v)) {\n                                nb.data.push(value[v].values);\n                                nb.series.push(value[v].key);\n                            }\n                        }\n                        value = [{key:node.id, values:nb}];\n                    }\n                    else {\n                        if (value[0] && value[0].hasOwnProperty(\"values\")) {\n                            if (Array.isArray(value[0].values)) { // Handle \"old\" style data array\n                                var na = {series:[], data:[]};\n                                for (var n=0; n<value.length; n++) {\n                                    na.series.push(value[n].key);\n                                    na.data.push(value[n].values.map(function(i) {\n                                        return {x:i[0], y:i[1]};\n                                    }));\n                                }\n                                value = [{ key:node.id, values:na}];\n                            }\n                        }\n                    }\n                    converted.update = false;\n                    converted.updatedValues = value;\n                }\n                else {\n                    value = parseFloat(value);\n                    if (isNaN(value)) { return oldValue || []; }\n                    var topic = msg.topic || 'Series 1';\n                    var storageKey = node.id;\n                    var found;\n                    if (!oldValue) { oldValue = [];}\n                    if (node.chartType !== \"line\") {  // handle bar and pie type data\n                        if (oldValue.length === 0) {\n                            oldValue = [{ key: storageKey, values: { data:[], series:[], labels:[] }\n                            }]\n                        }\n                        for (var i=0; i<oldValue[0].values.series.length; i++) {\n                            if (oldValue[0].values.series[i] === topic) {\n                                oldValue[0].values.data[i] = value;\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            oldValue[0].values.series.push(topic);\n                            oldValue[0].values.labels.push(topic);\n                            oldValue[0].values.data.push(value);\n                        }\n                        converted.update = false;\n                        converted.updatedValues = oldValue;\n                    }\n                    else { // Line chart\n                        // Find the chart data\n                        for (var j = 0; j < oldValue.length; j++) {\n                            if (oldValue[j].key === storageKey) {\n                                found = oldValue[j];\n                                break;\n                            }\n                        }\n\n                        // Setup the data structure if this is the first time\n                        if (!found) {\n                            found = {\n                                key: storageKey,\n                                values: {\n                                    series: [],\n                                    data: []\n                                }\n                            }\n                            oldValue.push(found);\n                        }\n\n                        // Create the new point and add to the dataset\n                        // Create series if it doesn't exist\n                        var seriesIndex = found.values.series.indexOf(topic);\n                        if (seriesIndex === -1) {\n                            found.values.series.push(topic);\n                            found.values.data.push([]);\n                            seriesIndex = found.values.series.indexOf(topic);\n                        }\n\n                        // Add a new point\n                        var time = new Date().getTime();\n\n                        // Add the data to the correct series\n                        var point = {\"x\": time, \"y\": value};\n                        found.values.data[seriesIndex].push(point);\n\n                        // Remove datapoints older than a certain time\n                        var limitOffsetSec = parseInt(config.removeOlder) * parseInt(config.removeOlderUnit);\n                        var limitTime = new Date().getTime() - limitOffsetSec * 1000;\n                        var pointsLimit = config.removeOlderPoints;\n                        var removed = [];\n                        var removeSeries = [];\n\n                        oldValue[0].values.data.forEach(function(series, seriesIndex) {\n                            var i = 0;\n                            while (i < series.length && series[i]['x'] < limitTime) { i++; }\n                            if (i > 0) {\n                                series.splice(0, i);\n                                removed.push({seriesIndex: seriesIndex, noPoints: i});\n                            }\n\n                            // Remove old datapoints if total is greater than points limit\n                            if (pointsLimit > 0 && series.length > pointsLimit) {\n                                var noToRemove = series.length - pointsLimit;\n                                series.splice(0, noToRemove);\n                                removed.push({seriesIndex: seriesIndex, noPoints: noToRemove});\n                            }\n\n                            if (series.length === 0) { removeSeries.push(seriesIndex); }\n                        });\n\n                        // Ensure series match up\n                        removeSeries.forEach(function(index) {\n                            oldValue[0].values.series.splice(index, 1);\n                            oldValue[0].values.data.splice(index, 1);\n                        });\n\n                        // If more datapoints than number of pixels wide...\n                        // if (found.values.data[seriesIndex].length % pixelsWide === 0) {\n                        //     node.warn(\"More than \"+found.values.length+\" datapoints\");\n                        // }\n\n                        // Return an object including the new point and all the values\n                        converted.update = true;\n                        converted.newPoint = [{\n                            key: topic,\n                            update: true,\n                            removedData: removed,\n                            removedSeries: removeSeries,\n                            values: {\n                                data: point\n                            }\n                        }];\n                        converted.updatedValues = oldValue;\n                    }\n                }\n                return converted;\n            }\n        };\n\n        var done = ui.add(options);\n        setTimeout(function() {\n            node.emit(\"input\",{payload:\"start\"}); // trigger a redraw at start to flush out old data.\n            if (node.wires.length === 2) { // if it's an old version of the node honour it\n                node.send([null, {payload:\"restore\", for:node.id}]);\n            }\n        }, 100);\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_chart\", ChartNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_colour_picker.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n    var tc = require('../dist/js/tinycolor-min');\n\n    function ColourPickerNode(config) {\n        RED.nodes.createNode(this, config);\n        this.format = config.format;\n        this.outformat = config.outformat;\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        var done = ui.add({\n            node: node,\n            tab: tab,\n            group: group,\n            forwardInputMessages: config.passthru,\n            control: {\n                type: 'colour-picker',\n                label: config.label,\n                format: config.format,\n                showPicker: config.showPicker,\n                showSwatch: config.showSwatch,\n                showValue: config.showValue,\n                showAlpha: config.showAlpha,\n                showLightness: config.showLightness,\n                order: config.order,\n                value: '',\n                width: config.width || group.config.width || 6,\n                height: config.height || 1\n            },\n            beforeSend: function (msg) {\n                if (node.outformat === 'object') {\n                    var pay = tc(msg.payload);\n                    if (node.format === 'rgb') { msg.payload = pay.toRgb(); }\n                    if (node.format === 'hsl') { msg.payload = pay.toHsl(); }\n                    if (node.format === 'hsv') { msg.payload = pay.toHsv(); }\n                    if (node.format === 'hex') { msg.payload = pay.toHex(); }\n                    if (node.format === 'hex8') { msg.payload = pay.toHex8(); }\n                }\n                msg.topic = config.topic || msg.topic;\n            },\n            convert: function(payload) {\n                colour = tc(payload);\n                return colour.toString(config.format);\n            }\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_colour_picker\", ColourPickerNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_date_picker.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function DatePickerNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        var done = ui.add({\n            node: node,\n            tab: tab,\n            group: group,\n            forwardInputMessages: config.passthru,\n            control: {\n                type: 'date-picker',\n                label: config.label,\n                order: config.order,\n                ddd : new Date(),\n                width: config.width || group.config.width || 6,\n                height: config.height || 1\n            },\n            convert: function (payload) {\n                var d = new Date(payload);\n                this.control.ddd = d;\n                return payload;\n            },\n            beforeEmit: function (msg, value) {\n                value = new Date(value);\n                return { msg:msg, value:value };\n            },\n            convertBack: function (value) {\n                var d = new Date(value).valueOf();\n                return d;\n            },\n            beforeSend: function (msg) {\n                msg.topic = config.topic || msg.topic;\n            }\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_date_picker\", DatePickerNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_dropdown.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function DropdownNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        var control = {\n                type: 'dropdown',\n                label: config.label,\n                placeholder: config.place || \"Select option\",\n                order: config.order,\n                value: config.payload || node.id,\n                width: config.width || group.config.width || 6,\n                height: config.height || 1,\n                options: config.options\n            };\n\n        var emitOptions;\n\n        var done = ui.add({\n            node: node,\n            tab: tab,\n            group: group,\n            forwardInputMessages: config.passthru,\n            control: control,\n\n            convert: function (payload, oldValue, msg) {\n                // convert msg\n                // as of now, only allow a full replacement of options\n                // beforeEmit is only called when a node linked to us sends a msg\n                // we are expecting to receive an \"update options\" msg\n                // which we expect to be an array of new options\n\n                // for convenience, we pass an indication to the node connected to this dropdown\n                // that this is an \"update options\" message coming from the input sender\n                // 'beforeEmit' is called before 'beforeSend', so we may pass in that info\n                // otherwise that convenience info would not be sent (would not cause any problems)...\n\n                emitOptions = {isOptionsValid:false, value:undefined, newOptions:undefined};\n                do {\n                    if (!msg.options || !Array.isArray(msg.options)) { break; }\n                    emitOptions.newOptions = [];\n                    if (msg.options.length === 0) {\n                        emitOptions.isOptionsValid = true;\n                        break;\n                    }\n                    // could check whether or not all members have same type\n                    for (var i = 0; i < msg.options.length; i++) {\n                        var opt = msg.options[i];\n                        if (opt === undefined || opt === null) { continue; }\n\n                        switch (typeof opt) {\n                            case 'number': {\n                                opt = \"\" + opt;\n                                emitOptions.newOptions.push({label:opt, value:opt});\n                                break;\n                            }\n                            case 'string': {\n                                emitOptions.newOptions.push({label:opt, value:opt});\n                                break;\n                            }\n                            case 'object': {\n                                // assuming object of {label:value}\n                                for (var m in opt) {\n                                    if (opt.hasOwnProperty(m)) {\n                                        emitOptions.newOptions.push({label:m, value:opt[m]});\n                                    }\n                                }\n                                break;\n                            }\n                            default:\n                                // do nothing, just continue with next option\n                        }\n                    }\n                    // send null object on change of menu list\n                    if (emitOptions.newOptions.length > 0) { emitOptions.value = null; }\n                    // or send the preselected value\n                    if (msg.payload) { emitOptions.value = msg.payload; }\n                    emitOptions.isOptionsValid = true;\n                } while (false);\n                // finally adjust msg to reflect the input\n                msg.fromInput = true;\n                if (emitOptions.isOptionsValid) {\n                    control.options = emitOptions.newOptions;\n                    control.value = emitOptions.value;\n                } else {\n                    if (msg.options) {\n                        node.error(\"ERR: Invalid Options\", msg);\n                    }\n                }\n\n                if (msg.hasOwnProperty(\"payload\")) {\n                    emitOptions.value = msg.payload;\n                    control.value = emitOptions.value;\n                    emitOptions.fromInput = true;\n                    return emitOptions;\n                }\n                // we do not overide payload here due to 'opt.emitOnlyNewValues' in ui.js\n                // when undefined is returned, msg will not be forwarded\n                return emitOptions.isOptionsValid ? emitOptions : undefined; // always pass entire object (newValue == oldValue)\n            },\n\n            beforeEmit: function (msg, newValue) {\n                return emitOptions;\n            },\n\n            beforeSend: function (msg) {\n                if (msg.fromInput) {\n                    delete msg.options;\n                    msg.payload = emitOptions.value;\n                }\n                msg.topic = config.topic || msg.topic; //pass through topic if not set\n            }\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_dropdown\", DropdownNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_form.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function FormNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        var done = ui.add({\n            node: node,\n            tab: tab,\n            group: group,\n            control: {\n                type: 'form',\n                label: config.label,\n                order: config.order,\n                value: config.payload || node.id,\n                width: config.width || group.config.width || 6,\n                height: config.height || config.options.length ,//? config.options.length+3 : 3,\n                options: config.options,\n                formValue:config.formValue\n            },\n            beforeSend: function (msg) {\n                msg.topic = config.topic;\n            }\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_form\", FormNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_gauge.js":"module.exports = function (RED) {\n    var ui = require('../ui')(RED);\n\n    function GaugeNode(config) {\n        RED.nodes.createNode(this, config);\n        this.colors = config.colors || [\"#00B500\",\"#E6E600\",\"#CA3838\"];\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        if (config.width === \"0\") { delete config.width; }\n        if (config.height === \"0\") { delete config.height; }\n        if (config.height === \"1\") { config.hideMinMax = true; }\n        node.autoheight = parseInt(group.config.width*0.5+1.5) || 4;\n        if (config.gtype && config.gtype === \"wave\") { node.autoheight = parseInt(group.config.width*0.75+0.5); }\n        if (config.gtype && config.gtype === \"donut\") { node.autoheight = parseInt(group.config.width -1); }\n        if (config.gtype && config.gtype === \"compass\") { node.autoheight = parseInt(group.config.width -1); }\n\n        var sizes = ui.getSizes();\n        var theme = ui.getTheme();\n        if (theme === undefined) {\n            theme = {\"group-textColor\":{value:\"#000\"}};\n            theme[\"widget-textColor\"] = {value:\"#000\"};\n            theme[\"widget-backgroundColor\"] = {value:'#1784be'};\n        }\n\n        var gageoptions = {};\n        gageoptions.lineWidth = {'theme-dark':0.75};\n        gageoptions.pointerOptions = {'theme-dark':{color:'#8e8e93'}, 'theme-custom':theme[\"group-textColor\"].value};\n        gageoptions.backgroundColor = {'theme-dark':'#515151', 'theme-custom':theme[\"widget-textColor\"].value };\n        gageoptions.compassColor = {'theme-dark':'#0b8489', 'theme-light':'#1784be', 'theme-custom':theme[\"widget-backgroundColor\"].value};\n        if ((config.seg1 && config.seg1 !== \"\") && (config.seg2 && config.seg2 !== \"\")) {\n            gageoptions.customrange = [\n                { color : node.colors[0], lo : config.min, hi : config.seg1 },\n                { color : node.colors[1], lo : config.seg1, hi : config.seg2 },\n                { color : node.colors[2], lo : config.seg2, hi : config.max }\n            ];\n        }\n\n        var waveoptions = {};\n        waveoptions.circleColor = {'theme-dark':'#097479', 'theme-light':'#0094ce', 'theme-custom':theme[\"widget-backgroundColor\"].value};\n        waveoptions.waveColor = {'theme-dark':'#097479', 'theme-light':'#0094ce', 'theme-custom':theme[\"widget-backgroundColor\"].value};\n        waveoptions.textColor = {'theme-dark':'#0b8489', 'theme-light':'#1784be', 'theme-custom':theme[\"widget-textColor\"].value};\n        waveoptions.waveTextColor = {'theme-dark':'#0fbbc3', 'theme-light':'#a4dbf8', 'theme-custom':theme[\"widget-textColor\"].value};\n\n        var done = ui.add({\n            node: node,\n            tab: tab,\n            group: group,\n            control: {\n                type: 'gauge',\n                name: config.name,\n                label: config.title,\n                units: config.label,\n                order: config.order,\n                value: config.min,\n                format: config.format,\n                gtype: config.gtype || 'gage',\n                min: config.min,\n                max: config.max,\n                sizes: sizes,\n                hideMinMax: config.hideMinMax,\n                width: config.width || group.config.width || 6,\n                height: config.height || node.autoheight,\n                colors: node.colors,\n                gageoptions: gageoptions,\n                waveoptions: waveoptions\n            },\n            beforeSend: function (msg) {\n                //msg.topic = config.topic;\n            },\n            convert: ui.toFloat.bind(this, config)\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_gauge\", GaugeNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_group.js":"module.exports = function(RED) {\n\n    function GroupNode(config) {\n        RED.nodes.createNode(this, config);\n        this.config = {\n            name: config.name,\n            disp: config.disp,\n            width: config.width,\n            order: config.order,\n            tab: config.tab\n        };\n        if (!this.config.hasOwnProperty(\"disp\")) { this.config.disp = true; }\n        if (this.config.disp !== false) { this.config.disp = true; }\n    }\n\n    RED.nodes.registerType(\"ui_group\", GroupNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_link.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function LinkNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n        var done = ui.addLink(config.name, config.link, config.icon, config.order, config.target);\n        node.on(\"close\", done);\n    }\n\n    RED.nodes.registerType(\"ui_link\", LinkNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_numeric.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function NumericNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        var done = ui.add({\n            node: node,\n            tab: tab,\n            group: group,\n            forwardInputMessages: config.passthru,\n            control: {\n                type: 'numeric',\n                label: config.label,\n                order: config.order,\n                format: config.format,\n                value: Number(config.min),\n                min: Number(config.min),\n                max: Number(config.max),\n                step: Number(config.step || 1),\n                width: config.width || group.config.width || 6,\n                height: config.height || 1\n            },\n            beforeSend: function (msg) {\n                msg.topic = config.topic || msg.topic;\n            },\n            convert: ui.toFloat.bind(this, config)\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_numeric\", NumericNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_slider.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function SliderNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        var done = ui.add({\n            node: node,\n            tab: tab,\n            group: group,\n            forwardInputMessages: config.passthru,\n            control: {\n                type: 'slider',\n                label: config.label,\n                order: config.order,\n                value: config.min,\n                min: config.min,\n                max: config.max,\n                step: config.step || 1,\n                width: config.width || group.config.width || 6,\n                height: config.height || 1\n            },\n            beforeSend: function (msg) {\n                msg.topic = config.topic || msg.topic;\n            },\n            convert: ui.toFloat.bind(this, config)\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_slider\", SliderNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_switch.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function validateSwitchValue(node,property,type,payload) {\n        if (payloadType === 'flow' || payloadType === 'global') {\n            try {\n                var parts = RED.util.normalisePropertyExpression(payload);\n                if (parts.length === '') {\n                    throw new Error();\n                }\n            } catch(err) {\n                node.warn(\"Invalid payload property expression - defaulting to node id\")\n                payload = node.id;\n                payloadType = 'str';\n            }\n        } else {\n            payload = payload || node.id;\n        }\n    }\n    function SwitchNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        var parts;\n        var onvalue = config.onvalue;\n        var onvalueType = config.onvalueType;\n        if (onvalueType === 'flow' || onvalueType === 'global') {\n            try {\n                parts = RED.util.normalisePropertyExpression(onvalue);\n                //console.log(parts);\n                if (parts.length === 0) {\n                    throw new Error();\n                }\n            } catch(err) {\n                node.warn(\"Invalid onvalue property expression - defaulting to true\")\n                onvalue = true;\n                onvalueType = 'bool';\n            }\n        }\n        var offvalue = config.offvalue;\n        var offvalueType = config.offvalueType;\n        if (offvalueType === 'flow' || offvalueType === 'global') {\n            try {\n                parts = RED.util.normalisePropertyExpression(offvalue);\n                if (parts.length === 0) {\n                    throw new Error();\n                }\n            } catch(err) {\n                node.warn(\"Invalid offvalue property expression - defaulting to false\")\n                offvalue = false;\n                offvalueType = 'bool';\n            }\n        }\n\n        var done = ui.add({\n            node: node,\n            tab: tab,\n            group: group,\n            forwardInputMessages: config.passthru,\n            storeFrontEndInputAsState: (config.decouple === \"true\") ? false : true,\n            control: {\n                type: 'switch' + (config.style ? '-' + config.style : ''),\n                label: config.label,\n                order: config.order,\n                value: false,\n                onicon: config.onicon,\n                officon: config.officon,\n                oncolor: config.oncolor,\n                offcolor: config.offcolor,\n                width: config.width || group.config.width || 6,\n                height: config.height || 1\n            },\n            convert: function (payload,oldval) {\n                var myOnValue,myOffvalue;\n                if (onvalueType === \"date\") { myOnValue = Date.now(); }\n                else { myOnValue = RED.util.evaluateNodeProperty(onvalue,onvalueType,node); }\n\n                if (offvalueType === \"date\") { myOffvalue = Date.now(); }\n                else { myOffvalue = RED.util.evaluateNodeProperty(offvalue,offvalueType,node); }\n\n                if (RED.util.compareObjects(myOnValue,payload)) { return true; }\n                else if (RED.util.compareObjects(myOffvalue,payload)) { return false; }\n                else { return oldval; }\n            },\n            convertBack: function (value) {\n                var payload = value ? onvalue : offvalue;\n                var payloadType = value ? onvalueType : offvalueType;\n                if (payloadType === \"date\") { value = Date.now(); }\n                else { value = RED.util.evaluateNodeProperty(payload,payloadType,node); }\n                return value;\n            },\n            beforeSend: function (msg) {\n                msg.topic = config.topic || msg.topic;\n            },\n            beforeEmit: function(msg, value) {\n                return { msg:msg, value:value };\n            }\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_switch\", SwitchNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_tab.js":"module.exports = function(RED) {\n\n    function TabNode(config) {\n        RED.nodes.createNode(this, config);\n        this.config = {\n            name: config.name,\n            order: config.order || 0,\n            icon: config.icon || ''\n        };\n    }\n\n    RED.nodes.registerType(\"ui_tab\", TabNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_template.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function TemplateNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n        var hei = Number(config.height|| 0);\n\n        var done = ui.add({\n            forwardInputMessages: config.fwdInMessages,\n            storeFrontEndInputAsState: config.storeOutMessages,\n            emitOnlyNewValues: false,\n            node: node,\n            tab: tab,\n            group: group,\n            control: {\n                type: 'template',\n                order: config.order,\n                width: config.width || group.config.width || 6,\n                height: hei,\n                format: config.format\n            },\n            beforeEmit: function(msg, value) {\n                var properties = Object.getOwnPropertyNames(msg).filter(function (p) { return p[0] != '_'; });\n                var clonedMsg = {};\n\n                for (var i=0; i<properties.length; i++) {\n                    var property = properties[i];\n                    clonedMsg[property] = msg[property];\n                }\n                //This updates the whole page if the template input changes and\n                //height set to auto - performance killer, but here just in case\n                // if ((config.height == \"0\") && (value !== node.oldvalue)) {\n                //     node.oldvalue = value;\n                //     setImmediate(function() { ui.updateUi(); });\n                // }\n                return { msg:clonedMsg };\n            },\n            beforeSend: function (msg, original) {\n                if (original) { return original.msg; }\n            }\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_template\", TemplateNode);\n    RED.library.register(\"uitemplates\");\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_text_input.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function TextInputNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        var done = ui.add({\n            node: node,\n            tab: tab,\n            group: group,\n            forwardInputMessages: config.passthru,\n            control: {\n                type: (config.delay <= 0 ? 'text-input-CR' : 'text-input'),\n                label: config.label,\n                mode: config.mode,\n                delay: config.delay,\n                order: config.order,\n                value: '',\n                width: config.width || group.config.width || 6,\n                height: config.height || 1\n            },\n            beforeSend: function (msg) {\n                msg.topic = config.topic || msg.topic;\n            },\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_text_input\", TextInputNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_text.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function TextNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        var group = RED.nodes.getNode(config.group);\n        if (!group) { return; }\n        var tab = RED.nodes.getNode(group.config.tab);\n        if (!tab) { return; }\n\n        var layout = config.layout||\"row-spread\";\n        var angLayout = \"row\";\n        var angLayoutAlign = \"space-between center\";\n        if (layout === \"row-spread\") { angLayout = 'row'; angLayoutAlign = 'space-between center'}\n        else if (layout === \"row-left\") { angLayout = 'row'; angLayoutAlign = 'start center'}\n        else if (layout === \"row-center\") { angLayout = 'row'; angLayoutAlign = 'center center'}\n        else if (layout === \"row-right\") { angLayout = 'row'; angLayoutAlign = 'end center'}\n        else if (layout === \"col-center\") { angLayout = 'column'; angLayoutAlign = 'center center'}\n        var done = ui.add({\n            emitOnlyNewValues: false,\n            node: node,\n            tab: tab,\n            group: group,\n            control: {\n                type: 'text',\n                label: config.label,\n                order: config.order,\n                format: config.format,\n                width: config.width || group.config.width || 6,\n                height: config.height || 1,\n                layout: angLayout,\n                layoutAlign: angLayoutAlign\n            },\n            beforeEmit: function(msg, value) {\n                var properties = Object.getOwnPropertyNames(msg).filter(function (p) {return p[0] != '_';});\n                var clonedMsg = { };\n                for (var i=0; i<properties.length; i++) {\n                    var property = properties[i];\n                    clonedMsg[property] = msg[property];\n                }\n                return { msg: clonedMsg };\n            }\n        });\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_text\", TextNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_toast.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function ToastNode(config) {\n        RED.nodes.createNode(this, config);\n        if (config.hasOwnProperty(\"displayTime\") && (config.displayTime.length > 0)) {\n            try { this.displayTime = parseFloat(config.displayTime) * 1000; }\n            catch(e) { this.displayTime = 3000; }\n        }\n        else { this.displayTime = 3000; }\n        if (this.displayTime <= 0) { this.displayTime = 1; }\n        this.position = config.position || \"top right\";\n        this.highlight = config.highlight;\n        this.ok = config.ok;\n        this.cancel = config.cancel;\n        var node = this;\n\n        var done = ui.add({\n            node: node,\n            control: {},\n            storeFrontEndInputAsState: false,\n            forwardInputMessages: false,\n            beforeSend: function (toSend,msg) {\n                var m = msg.value.msg;\n                m.topic = config.topic || m.topic;\n                return m;\n            }\n        });\n\n        node.on('input', function(msg) {\n            if (node.position !== \"dialog\") { delete msg.socketid; }\n            ui.emitSocket('show-toast', {\n                title: msg.topic,\n                message: msg.payload,\n                highlight: node.highlight || msg.highlight,\n                displayTime: node.displayTime,\n                position: node.position,\n                id: node.id,\n                dialog: (node.position === \"dialog\") || false,\n                ok: node.ok,\n                cancel: node.cancel,\n                socketid: msg.socketid,\n                msg: msg\n            });\n        });\n\n        node.on(\"close\", done);\n    }\n    RED.nodes.registerType(\"ui_toast\", ToastNode);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-dashboard/node_modules/node-red-dashboard/nodes/ui_ui_control.js":"module.exports = function(RED) {\n    var ui = require('../ui')(RED);\n\n    function UiControlNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n\n        this.on('input', function(msg) {\n            if (typeof msg.payload !== \"object\") { msg.payload = {tab:msg.payload}; }\n            // switch to tab name (or number)\n            if (msg.payload.hasOwnProperty(\"tab\")) {\n                ui.emit('ui-control', {tab:msg.payload.tab, socketid:msg.socketid});\n            }\n        });\n\n        ui.ev.on('newsocket', function(id,ip) {\n            node.send({payload:\"connect\", socketid:id, socketip:ip});\n        });\n\n        ui.ev.on('endsocket', function(id,ip) {\n            node.send({payload:\"lost\", socketid:id, socketip:ip});\n        });\n\n        this.on('close', function() {\n            ui.ev.removeAllListeners();\n        })\n    }\n    RED.nodes.registerType(\"ui_ui_control\", UiControlNode);\n};\n"}